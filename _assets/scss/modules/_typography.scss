// Typography Mixins
@mixin minion-pro {
	font-family: "minion-pro-1", "minion-pro-2", sans-serif;
	font-style: normal;
	font-weight: 400;
}

@mixin freight {
	font-family: "freight-sans-pro-1", "freight-sans-pro-2", sans-serif;
	font-style: normal;
	font-weight: 400;
}

@mixin freightBold() {
	font-family: "freight-sans-pro-1", "freight-sans-pro-2", sans-serif;
	font-style: normal;
	font-weight: 700;
}

@mixin skolar {
	font-family: "skolar", "skolar-1", serif;
	font-style: normal;
	font-weight: 400;
}

@mixin scala {
	font-family: "ff-scala-web-sc-1", "ff-scala-web-sc-2", sans-serif;
	font-style: normal;
	font-weight: 400;

}

@mixin tisa {
	font-family: "ff-tisa-web-pro-1", "ff-tisa-web-pro-2", serif;
	font-style: normal;
	font-weight: 400;

}

@mixin freight-text-pro {
	font-family: "freight-text-pro-1", "freight-text-pro-2", sans-serif;
	font-style: normal;
	font-weight: 300;
}

@mixin garamond {
	font-family: "adobe-garamond-pro-1", "adobe-garamond-pro-2", sans-serif;
	font-style: normal;
	font-weight: 400;
}



// Return an em value based on the $base-font-size or contextual size. Thanks @ijy https://gist.github.com/ijy/1441967
@function em($target, $context: $base-font-size) {
	@if $target == 0 {
		@return 0
	}
	@return $target / $context + 0em;
}

// Generate a baseline guide equal to the rhythm unit
@mixin baseline-guide {
	background-image: linear-gradient($guide-color 1px, transparent 1px);
	background-size: 100% em($rhythm-unit);
}

.typogrid {}

html {
	font-size: 100%;
	-webkit-font-smoothing: antialiased;
	-ms-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
	&.baseline {
		@include baseline-guide;
		@include mq($bp-large-screen) {
			background-size: 100% 1.875em;
		}
	}
} 

body {
	@include skolar;
	text-shadow: 0 0 1px rgba(0, 0, 0, 0.3);
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	color: $cp-light-black;
	line-height: 1.5;
}

p {
	line-height: 1.5;
	margin-bottom: 1.5em;
	@include mq($bp-large-screen) {

	}
	-webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
	-moz-font-feature-settings: 'kern=1, onum=1, liga=1';
	-ms-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
	-o-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
	font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
}

a {
	color: $cp-light-black;
	&:hover {
	}
	&:link {
	}
	&:active {
	}
	&:visited {
		color: $cp-light-black;
	}
}

h1,
h2,
h3,
h4,
h5,
h6 {
	-webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
	-moz-font-feature-settings: 'dlig=1, liga=1, lnum=1, kern=1';
	-ms-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
	-o-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
	font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
}

h1 {
	font-size: #{$base-font-size * map-get($typo_scale, ms9)}; // Pixel :/
	font-size: #{map-get($typo_scale, ms9)}rem; // Rem
	line-height: map-get($typo_scale, ms8);
	&.welcome-quote {
		$typo_value: map-get($typo_scale, ms7) + map-get($typo_scale, ms3);
		@include toRem(map-get($typo_scale, large));
		text-align: center; 
		line-height: $typo_value;

		margin: #{round($typo_value * $base-font-size)}px auto;
		margin: #{$typo_value}rem auto;
		@include mq($bp-large-screen){
			@include toRem(map-get($typo_scale, extra));
			line-height: map-get($typo_scale, ms7);
		}
 
	}
}

h2 {
}

h3 {
}

h4,
h5 {
}

h6 {
}

.blink {
	text-decoration: line-through;
}

blockquote {
	
}

ul,
ol {
	
}
ul {
	li {
	}
}

ol {
	li {
	}
}

em, strong, code {
	line-height: 1;
}

blockquote {
	font-style: italic;
	border-left :  1px solid #ff0000;
	padding-left:10px;
	max-width: 85%;
	margin: auto;
}
.meta {
	font-style: italic;
	display:block;
	text-align: center;
}

