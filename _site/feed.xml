<!DOCTYPE html>
<html lang="en-GB">
  <!--[if IEMobile 7 ]><html class="no-js iem7" manifest="default.appcache?v=1"><![endif]--> 
<!--[if lt IE 7 ]><html class="no-js ie6" lang="en"><![endif]--> 
<!--[if IE 7 ]><html class="no-js ie7" lang="en"><![endif]--> 
<!--[if IE 8 ]><html class="no-js ie8" lang="en"><![endif]--> 
<!--[if (gte IE 9)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Antonio Fullone</title>
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
	<meta name="description" content="Antonio Fullone. Life, food, travelling and coding.">
	<link rel="canonical" href="http://antoniofullone.com//feed.xml">
	<link rel="shortcut icon" href="/img/favicon.ico"/>
	<!-- Custom CSS -->
	<link rel="stylesheet" href="/css/style.css">
	<!--	<script src="/js/modernizr.custom.js"></script> -->
	<script>
	  (function(d) {
	    var config = {
	      kitId: 'szm0avi',
	      scriptTimeout: 3000
	    },
	    h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='//use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
	  })(document);
	</script>
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-43254394-6', 'auto');
	  ga('send', 'pageview');

	</script>
</head>
	<body class="">
		
		

    <body>
		<!--[if lt IE 8]>
            <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
    <div id="page" class="page">
	
	<!--</header>-->
		<header class="main-header" role="banner">
			<div class="logo">
				<a href="/" class="logo__link">
					<img class="logo__image" src="/images/logo.png" alt="" class="img-logo">  	
				</a>		
			</div>
			<nav class="main-nav" role="navigation">
				<a class="main-nav__item" href="/antonio/" title="About me">ABOUT</a>
				<a class="main-nav__item"  href="/journal/" title="Journal">JOURNAL</a>
				<a class="main-nav__item"  href="/lab" title="">LAB</a>
				<a class="main-nav__item"  href="#email" title="">CONTACT</a>
			</nav>
		</header>


      <?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Antonio Fullone</title>
    <description>Antonio Fullone. Life, food, travelling and coding.</description>
    <link>http://antoniofullone.com//</link>
    <atom:link href="http://antoniofullone.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 17 Apr 2015 19:06:30 +0200</pubDate>
    <lastBuildDate>Fri, 17 Apr 2015 19:06:30 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Off Canvas with only Css</title>
        <description>&lt;p&gt;Yesterday evening I was bored at home (as usual) and the weather was cold (as usual) so I decided to spend some time fixing some bug on this site.&lt;/p&gt;

&lt;p&gt;I linked the “contact” link in the navigation to the contact section in the footer. My friend &lt;a href=&quot;https://twitter.com/twittgrinder&quot;&gt;Marco&lt;/a&gt; suggested me that this way was not clear on how to find to contact so I looked for a solution, which I founded in the :target &lt;a href=&quot;http://www.w3.org/wiki/CSS/Selectors/pseudo-classes/:target&quot;&gt;pseudo selector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How :target work is pretty simple, it just matches the selector id with the hash in the url. So if you have a url like this mysite.com/#contact you can style your element with #contact:target. And so I did for the email link in the footer and highlight the email link in bold-red when matching the target.&lt;/p&gt;

&lt;p&gt;After that I started to experiment a little bit with this selector, and i came up with this (kinda of silly) off canvas.
Basically with no javascript and no &lt;a href=&quot;https://css-tricks.com/the-checkbox-hack/&quot;&gt;checkbox hack&lt;/a&gt; it is possible to create a complete menu. Another trick I used is on the close button, where I just change the #hash and so removing the style to the sidebar. You can check the example &lt;a href=&quot;/off-canvas/&quot;&gt;here&lt;/a&gt; and on &lt;a href=&quot;http://codepen.io/lastwebdesigner/pen/JoVVOp&quot;&gt;codepen&lt;/a&gt;, and the code &lt;a href=&quot;https://bitbucket.org/afullone/off-canvas-with-css&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course keep in mind that is something that would never end up in production but it was fun to play with it. Highliting the section I think is ok to use it, as it is just an enhancement. :D&lt;/p&gt;

&lt;p&gt;Go to example : &lt;a href=&quot;/off-canvas/&quot;&gt;Off Canvas with only Css using the :target pseudo selector&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 21:40:00 +0200</pubDate>
        <link>http://antoniofullone.com//dev/2015/04/03/off-canvas-with-only-css/</link>
        <guid isPermaLink="true">http://antoniofullone.com//dev/2015/04/03/off-canvas-with-only-css/</guid>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>My simple rules when writing Sass</title>
        <description>&lt;p&gt;&lt;strong&gt;Sass&lt;/strong&gt; is awesome. It is an incredible tool that gives a lot of power to our css code but, as we know, “&lt;em&gt;with great power comes great responsibility&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;When writing &lt;strong&gt;Sass&lt;/strong&gt;, especially at the beginning, it’s easy to &lt;strong&gt;bloat&lt;/strong&gt; your code. The reason is the &lt;em&gt;misuse&lt;/em&gt; of the various features without, often, thinking forward to the compiled code. 
I have some simple rules that I apply every time I am writing code with &lt;strong&gt;Sass&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dont-extend-everything&quot;&gt;Don’t @extend everything.&lt;/h2&gt;

&lt;p&gt;Is an easy one. You start using the @&lt;em&gt;extend&lt;/em&gt; feature, you get excited, you think you are doing &lt;strong&gt;OOCSS&lt;/strong&gt; the right way, and at some point you end up having code like that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class1, .class2,  .class3,  .class4,  .class5,  .class6,  .class7,  .class8,  .class9,  .class10,  .class11,  .class12,  .class12,  .class14, .and-so-on {
	text-align: center;
	line-height: 1.4;
	display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it would have been much more easy to just use one class and add it to the html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.one-class { 
	text-align: center;
	line-height: 1.4;
	display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or even worse you not only extend, but also adding new css code to the extended class, so your code end up in this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class1, .class2,  .class3,  .class4,  .class5,  .class6,  .class7,  .class8,  .class9,  .class10,  .class11,  .class12,  .class12,  .class14, .and-so-on {
	text-align: center;
	line-height: 1.4;
	display: block;
}

.class3 {
	color: red;
}

.class4{
	color:blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, might be simpler just to use a mixin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@mixin text-align($color: blue) {
	text-align: center;
	line-height: 1.4;
	display: block;
	color: $color;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dont-nest-everything&quot;&gt;Don’t nest everything.&lt;/h2&gt;

&lt;p&gt;Like @&lt;em&gt;extend&lt;/em&gt;, this is also a super abused feature of Sass. Nesting can be very bad for our code, can screw up specificity and make your code unmaintainable.&lt;/p&gt;

&lt;p&gt;I try to nest as &lt;em&gt;less as I can&lt;/em&gt;, if possible I prefer to add another class. On the other side, nesting is not bad if used carefully. One of the good use I found for it is when I am writing code for a module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.landing {   // every thing goes nested here at one level
  	.landing__element {
		
	}
	.landing—modifier {
		
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case I am creating a sort of “namespace” for my module. Usually the class, like in this case .landing, is the body or the main container.&lt;/p&gt;

&lt;p&gt;Many Sass experts suggest to do not nest more than 3 levels, I am not an expert but in my opinion 3 level is already a lot, especially if using ID’s or just simple selectors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class {
  #div {
	  p {
		  span.class {
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is wrong, and not only for the nesting.&lt;/p&gt;

&lt;h2 id=&quot;use-less-id-or-not-at-all&quot;&gt;Use less ID (or not at all)&lt;/h2&gt;

&lt;p&gt;Well .. we all know that there is hot a debate here, which is not strictly related to Sass but in somehow it is since Sass is perfect for those who love &lt;strong&gt;OOCSS&lt;/strong&gt;. I am not a religious fan of &lt;strong&gt;OOCSS&lt;/strong&gt;, I am a fan of the &lt;em&gt;right approach for each project&lt;/em&gt; (not always means OOCSS or sass), but when writing code for a large codebase, which is probably modular and using a preprocessor (that might not be sass), &lt;em&gt;the use of ID&lt;/em&gt;, or at least the massive use of it, is likely to create a lot of specificity problems.&lt;/p&gt;

&lt;p&gt;A good solution suggested is using &lt;strong&gt;div[id=test&lt;/strong&gt;] instead of #&lt;strong&gt;test&lt;/strong&gt; this is because the latter has a higher specificity while the first has the same specificity of the class. To be honest I don’t see any reason, or at least could not find any use case, to use div[id=test] while I can just use a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harry Roberts&lt;/strong&gt; has released a very interesting tool lately, &lt;a href=&quot;http://csswizardry.com/2014/10/the-specificity-graph/&quot;&gt;the Specificity Graph&lt;/a&gt;, I suggest you to give a look at it.&lt;/p&gt;

&lt;p&gt;If I am writing code for my small website/blog I am likely to use ID’s and style them, as the code is not big and I am fully aware of what I am doing,even more since I am the only person that basically touches the code. But when working with other people on a huge codebase, avoid or just limiting the use of ID is a huge, visible, improvement.&lt;/p&gt;

&lt;h2 id=&quot;use-maps-when-it-is-possible&quot;&gt;Use Maps when it is possible&lt;/h2&gt;

&lt;p&gt;Sass Maps are awesome. With Sass now is possible to store an array of variable, like a sort of “hash” in javascript.
I am using it since their release and, despite some issues with some tools that still do not support them, I am loving it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$bp (
  small: 20em,
  large: 45em
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here some example where the use of maps eases the workflow and,
also important, the problem of naming variables.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Color Palette&lt;/li&gt;
  &lt;li&gt;Z-Index Layers&lt;/li&gt;
  &lt;li&gt;Responsive Break Points&lt;/li&gt;
  &lt;li&gt;Typography Scale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The advantage is not only the better organization of the variables, take a look at this &lt;a href=&quot;http://viget.com/extend/sass-maps-are-awesome&quot;&gt;article&lt;/a&gt; to better understand how Maps can be very powerful.&lt;/p&gt;

&lt;h2 id=&quot;use-nested-media-queries-with-content&quot;&gt;Use nested Media Queries with @content&lt;/h2&gt;

&lt;p&gt;Just another awesome feature that not everyone I see is using it. @content is very powerful and I found the best use when writing media queries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class {
	// Styles
	@include mq(map-get($bp, large)) {
		// Media queries
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why should I re-rewrite my selectors while I can just nest the Media Queries? There is no need to re-write your selectors, just use a nested media query.&lt;/p&gt;

&lt;h2 id=&quot;modules-for-everything&quot;&gt;Modules for everything&lt;/h2&gt;

&lt;p&gt;Writing modular is the best approach ever to writing css code. No matter if you are using &lt;a href=&quot;http://oocss.org&quot;&gt;OOCSS&lt;/a&gt;, &lt;a href=&quot;https://smacss.com&quot;&gt;SMACCS&lt;/a&gt; or whatsoever, using a modular approach to your code can only brings benefits to the team. The Sass @import does the magic for you, importing directly the modules in the main file without doing any http request.&lt;/p&gt;

&lt;p&gt;Usually my style.scss file looks like this :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import “partial/variables”;
@import “partial/functions”;
@import “lib/susy/susy”;
@import “lib/mixins”;
@import “modules/headers/header”;
// And so on with the other modules.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I never write sass code directly in the main file, I only use import and everything is written inside small modules that are then imported. It makes the code much easier to maintain, update and understand for your new colleagues.&lt;/p&gt;

&lt;p&gt;So here they are, some simple rules that help me to get out the most of Sass without bloat the code, keeping it clean and reusable.&lt;/p&gt;

</description>
        <pubDate>Tue, 18 Nov 2014 23:00:00 +0100</pubDate>
        <link>http://antoniofullone.com//dev/2014/11/18/my-simple-rules-when-writing-sass-code/</link>
        <guid isPermaLink="true">http://antoniofullone.com//dev/2014/11/18/my-simple-rules-when-writing-sass-code/</guid>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Not just about work.</title>
        <description>&lt;p&gt;Tomorrow I am flying to Barcelona for a long weekend, I will meet some very nice friends there. We used to work together in Barcelona, back in 2008/2009 and we had a very nice time. I was &lt;em&gt;leading&lt;/em&gt; that team, so I am proud we built this &lt;em&gt;lovely friendship&lt;/em&gt; which is lasting for years.&lt;/p&gt;

&lt;p&gt;This is the list of the countries represented in this meeting :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Italy&lt;/li&gt;
  &lt;li&gt;Netherlands&lt;/li&gt;
  &lt;li&gt;Belgium&lt;/li&gt;
  &lt;li&gt;Sweden&lt;/li&gt;
  &lt;li&gt;Peru&lt;/li&gt;
  &lt;li&gt;Finland&lt;/li&gt;
  &lt;li&gt;Spain&lt;/li&gt;
  &lt;li&gt;Argentina (probably)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I met these amazing people because I went to live and work abroad, and this is the best part of being an &lt;strong&gt;expat&lt;/strong&gt;, something I never regret I did.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ideal place for me is the one in which it is most natural to live as a foreigner. - Italo Calvino.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 05 Nov 2014 22:30:00 +0100</pubDate>
        <link>http://antoniofullone.com//expat-life/2014/11/05/not-just-about-work/</link>
        <guid isPermaLink="true">http://antoniofullone.com//expat-life/2014/11/05/not-just-about-work/</guid>
        
        
        <category>expat-life</category>
        
      </item>
    
      <item>
        <title>Bye Bye Wordpress, welcome Jekyll!</title>
        <description>&lt;p&gt;I use to blog a couples of times for year, maybe three. Wordpress is really too much for me, I am tired of dealing with updates, database, plugins, spam. I did a first small move the last time that I redesigned my blog, making the about and home page static, and moving only to (real) blog part to Wordpress, but it turnout that was even more hard to maintain.&lt;/p&gt;

&lt;p&gt;Also the template system in Wordpress is complex while I, as you can see, I like to keep this site much simple as possible.&lt;/p&gt;

&lt;p&gt;The answer to all my questions is Jekyll. I was intrigued to use it, but a little bit “scared”,  I found out instead that is really easy to set up and use. I installed the Mac version, opened my Textmate and started moving the code from Wordpress to static pages in less than a weekend.&lt;/p&gt;

&lt;p&gt;Jekyll has his own template system, and once you do the build, the only thing is to use the same name pattern for the posts.&lt;/p&gt;

&lt;p&gt;Another reason why I moved to Jekyll is the fact that I love writing with IAWriter, which has a very good support for Markdown, and Jekyll uses Markdown for its posts, so it’s a perfect combination.&lt;/p&gt;

&lt;p&gt;The last thing to do was to find a good way to avoid to deploy manually every time, so I found &lt;a href=&quot;https://github.com/dmathieu/glynn&quot;&gt;Glynn&lt;/a&gt; which does the job for you, deploying also on the FTP.&lt;/p&gt;

&lt;p&gt;Next step is to move also my italian blog (which basically will just be a copy of this one, but probably different contents) where I use to blog more often, like 6/7 times a year.&lt;/p&gt;

&lt;p&gt;I am very happy now with the results, here some simple advantages I found on Jekyll:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Template : as I said above, easy, simple faster.&lt;/li&gt;
  &lt;li&gt;Static pages mean also speed, the page now load much faster.&lt;/li&gt;
  &lt;li&gt;Easy writing with Markdown.&lt;/li&gt;
  &lt;li&gt;Ridiculously easy to update and maintain. You just need a grunt file.&lt;/li&gt;
  &lt;li&gt;More freedom on styling and editing the posts, I can get rid of the rigid template system and build custom post each time I want.&lt;/li&gt;
  &lt;li&gt;Easy to update. It’s just html right? :D&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 27 Oct 2014 22:48:02 +0100</pubDate>
        <link>http://antoniofullone.com//dev/2014/10/27/bye-bye-wordpress-welcome-jekyll/</link>
        <guid isPermaLink="true">http://antoniofullone.com//dev/2014/10/27/bye-bye-wordpress-welcome-jekyll/</guid>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>
  

    		<footer class="main-footer">
			<div class="flexy">
				<div class="contact" id="contact">
					<ul>
						<li class="contact__item">
							<a href="http://nl.linkedin.com/in/antoniofullone" class="social linkedin">Linkedin</a>
						</li>
						<li class="contact__item">
							<a href="https://bitbucket.org/afullone" class="social bitbucket">BitBucket</a>
						</li>
						<li class="contact__item">
							<a href="https://github.com/lastwebdesigner" class="social github">Github</a>
						</li>
						<li class="contact__item">
							<a href="https://dribbble.com/lastwebdesigner" class="social twitter">Dribbble</a>
						</li>
						<li class="contact__item">
							<a href="https://twitter.com/LastWebdesigner" class="social dribbble">Twitter</a>
						</li>
						<li class="contact__item">
							<a href="https://www.facebook.com/Antonio.Fullone" class="social facebook">Facebook</a>
						</li>
						<li class="contact__item">
							<a href="https://plus.google.com/+antoniofullone/" class="social twitter">Google</a>
						</li>
						<li class="contact__item">
							<a href="mailto:antonio.fullone@gmail.com" id="email" class="social email">Email</a>
						</li>
					</ul>
				</div>
				<div class="nerdy">
					<div class="footer-info">
						<p>
							This is the personal website of Antonio Fullone, a web designer from Italy actually living in Delft, Netherlands. He loves design, coding, cooking, travelling and so on .. He loves Tigers.
						</p>
					</div>
					<h3 class="colophon__header">Nerdy Stuff</h3>
					<div class="colophon">
						<div class="col typgraphy">
						<h4>Typography</h4>
							<p>
								<strong>Body text:</strong> 
								Livory by HVD Fonts
								<strong>Navigation:</strong> 
								Proxima Nova by Mark Simonson Studio.							
							</p>
						</div>
						<div class="col coding">
						<h4>Design/Coding</h4>
						<p>
							Made with: <strong>Mac Book Pro 2013.</strong>
							Designed with: <strong>Sketch.</strong> 
							Coded with:  <strong>Sublime Text</strong> Html, Css Sass, Js.						
						</p>
						</div>
						<div class="col powered">
						<h4>Powered By</h4>
						<p>
							Proudly powered by
							<strong>Jekyll</strong> and hosted by
							<strong>Media Temple</strong>.						
						</p>
						</div>
					</div>
				</div>
			</div>
			<p class="copyright"> &copy;  2009-2015 </p>
		</footer>
	</div>

<script src="/main.js" async="true"></script> 

    </body>
</html>